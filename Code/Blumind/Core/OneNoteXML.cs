using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.Office.Interop.OneNote;
using System.Xml.Linq;
using System.IO;

namespace Blumind.Core
{
    class OneNoteXML
    {
        public Microsoft.Office.Interop.OneNote.Application onenoteApp = new Microsoft.Office.Interop.OneNote.Application();
        public string notebookXml;


        public string GetAllNotes()
        {
            // get the onenote xml data
            onenoteApp.GetHierarchy(null, HierarchyScope.hsPages, out notebookXml, XMLSchema.xs2013);
            string mmXML=SaveIntoBMD(notebookXml);
            return mmXML;
        }

        public void  NavigateTo(string PgID)
        {
            // navigate to page /section / notebook by ID
            onenoteApp.NavigateTo(PgID);            
            
        }
        private string SaveIntoBMD(string OneNoteXML)
        {
            // convert xml from OneNote to Blumind's bmd format, and save to desktop
            // Create the XmlDocument.


            string mmXML = OneNoteXML;

            //XDocument doc = XDocument.Parse(mmXML);
            //mmXML = mmXML.Replace("<one:", "\n<one:");
            //mmXML = mmXML.Replace("</one:", "\n</one:");
            mmXML = mmXML.Replace("<", "\n<");

            string[] mmXMLArr = mmXML.Split(new string[] { "\n", "\r\n" }, StringSplitOptions.RemoveEmptyEntries);

            string ph0 = "<map version=\"0.9.0\">\n";
            string ph1 = "<node BACKGROUND_COLOR = \"#BC8F8F\" COLOR = \"#000000\" ID = \"1\" POSITION = \"left\" TEXT = \"NoteBooks\" HGAP = \"12\" VGAP = \"12\" >";
            ph1 = ph1 + "\n<font FONT_FAMILY=\"微软雅黑\" SIZE=\"14\" STYLE=\"Regular\" />";
            string ph2 = "";
            int NIndex = 1;
            for (int i = 2; i < mmXMLArr.Length - 1; i++)
            {
                string OriXMLLine = mmXMLArr[i];
                string NewXMLLine = "";
                if (OriXMLLine.Contains("<one:Page"))
                {
                    NIndex++;
                    NewXMLLine = "\t\t\t\t" + GenPageNode(mmXMLArr[i], NIndex);
                }
                else if (OriXMLLine.Contains("<one:Section"))
                {
                    NIndex++;
                    NewXMLLine = "\t\t\t" + GenSectionNode(OriXMLLine, NIndex);
                }
                else if (OriXMLLine.Contains("<one:SectionGroup"))
                {
                    NIndex++;
                    NewXMLLine = "\t\t" + GenSectionGroupNode(OriXMLLine, NIndex);
                }
                else if (OriXMLLine.Contains("<one:Notebook"))
                {
                    NIndex++;
                    NewXMLLine = "\t" + GenNoteBookNode(OriXMLLine, NIndex);
                }
                /*
                 * else if (OriXMLLine.Contains("<one:Meta"))  // generated by OneNote add-in: TaggingKit
                {
                    NewXMLLine = "";
                }
                */
                else if (OriXMLLine.Contains("</one:Notebook>") || OriXMLLine.Contains("</one:SectionGroup>") || OriXMLLine.Contains("</one:Section>"))
                {
                    NewXMLLine = "\t\t\t\t" + "</node>";
                }
                ph2 = ph2 + "\n" + NewXMLLine;
            }
            string ConvertedXML = ph0 + ph1 + ph2 + "\n</node>\n</map>";

            //File.WriteAllText(@"C:\Users\wei_x\source\repos\Blumind\Documents\1240.mm", ConvertedXML);
            return ConvertedXML;



        }
        private string GenPageNode(string OriInfo, int NodeIndex)
        {
            //< node BACKGROUND_COLOR = "#D3D3D3" COLOR = "#000000" ID = "4" POSITION = "left" TEXT = "L2N1" HGAP = "2" VGAP = "2"  LINK="http://cn.bing.com/" />
            //<one:Page ID="{FD516CB5-2B12-0DBF-36F7-A94CC1F2CB61}{1}{E1954707177332228137621922741942907773224121}" name="Eng2" dateTime="2014-10-02T00:52:09.000Z" lastModifiedTime="2020-10-17T13:19:13.000Z" pageLevel="1" />
            //XDocument doc = XDocument.Parse(OriInfo);
            OriInfo = OriInfo.Replace("<one:", "<");

            string SecLastChar = OriInfo.Substring(OriInfo.Length - 2);
            bool ThisXmlLineClose = SecLastChar.Contains("/");
            if (!ThisXmlLineClose)
                OriInfo = OriInfo.Substring(0, OriInfo.Length - 1) + "/>";  //add "/" to fit the xml gramma 

            //OriInfo = FixXmlUnClose(OriInfo);
            XElement root = XElement.Parse(OriInfo);
            string name = ToHex(root.Attribute("name").Value);  // convert to hex, in case of any special charater in the name
            string PgID = root.Attribute("ID").Value;
            int PgLevel = Int32.Parse(root.Attribute("pageLevel").Value);
            string NIndx = NodeIndex.ToString();
            string NodeContent = "";
            //if (ThisXmlLineClose)
            NodeContent = "<node BACKGROUND_COLOR = \"#D3D3D3\" COLOR = \"#000000\" ID = \"" + NIndx + "\" POSITION = \"left\" TEXT = \"" + name + "\" HGAP = \"2\" VGAP = \"2\" LINK=\"" + PgID + "\"/>";
            // else
            //  NodeContent = "<node BACKGROUND_COLOR = \"#D3D3D3\" COLOR = \"#000000\" ID = \"" + NIndx + "\" POSITION = \"left\" TEXT = \"" + name + "\" HGAP = \"2\" VGAP = \"2\" LINK=\"" + PgID + "\">";

            /*
            switch (PgLevel)
            {
                case 1:
                    NodeContent = "<node BACKGROUND_COLOR = \"#D3D3D3\" COLOR = \"#000000\" ID = \""+ NIndx + "\" POSITION = \"left\" TEXT = \""+ name + "\" HGAP = \"2\" VGAP = \"2\" LINK=\""+ PgID + "\"/>";
                    break;
                case 2:
                    NodeContent = "<node><node BACKGROUND_COLOR = \"#D3D3D3\" COLOR = \"#000000\" ID = \"" + NIndx + "\" POSITION = \"left\" TEXT = \"" + name + "\" HGAP = \"2\" VGAP = \"2\" LINK=\"" + PgID + "\"/></node>";
                    break;
                case 3:
                    NodeContent = "<node><node><node BACKGROUND_COLOR = \"#D3D3D3\" COLOR = \"#000000\" ID = \"" + NIndx + "\" POSITION = \"left\" TEXT = \"" + name + "\" HGAP = \"2\" VGAP = \"2\" LINK=\"" + PgID + "\"/></node></node>";
                    break;
            }
            */

            return NodeContent;
        }

        private string GenSectionNode(string OriInfo, int NodeIndex)
        {
            //< node BACKGROUND_COLOR = "#D3D3D3" COLOR = "#000000" ID = "4" POSITION = "left" TEXT = "L2N1" HGAP = "2" VGAP = "2"  LINK="http://cn.bing.com/" />
            //<one:Page ID="{FD516CB5-2B12-0DBF-36F7-A94CC1F2CB61}{1}{E1954707177332228137621922741942907773224121}" name="Eng2" dateTime="2014-10-02T00:52:09.000Z" lastModifiedTime="2020-10-17T13:19:13.000Z" pageLevel="1" />
            //XDocument doc = XDocument.Parse(OriInfo);
            OriInfo = OriInfo.Replace("<one:", "<");
            string SecLastChar = OriInfo.Substring(OriInfo.Length - 2);
            bool ThisXmlLineClose = SecLastChar.Contains("/");
            if (!ThisXmlLineClose)
                OriInfo = OriInfo.Substring(0, OriInfo.Length - 1) + "/>";  //add "/" to fit the xml gramma              

            XElement root = XElement.Parse(OriInfo);
            string name = root.Attribute("name").Value;
            string SecID = root.Attribute("ID").Value;
            string NIndx = NodeIndex.ToString();
            string NodeContent = "";
            if (ThisXmlLineClose)
                NodeContent = "<node BACKGROUND_COLOR = \"#E0E9E0\" COLOR = \"#000000\" ID = \"" + NIndx + "\" POSITION = \"left\" TEXT = \"" + name + "\" HGAP = \"2\" VGAP = \"2\" LINK=\"" + SecID + "\"/>";
            else
                NodeContent = "<node BACKGROUND_COLOR = \"#E0E9E0\" COLOR = \"#000000\" ID = \"" + NIndx + "\" POSITION = \"left\" TEXT = \"" + name + "\" HGAP = \"2\" VGAP = \"2\" LINK=\"" + SecID + "\">";

            return NodeContent;
        }
        private string GenSectionGroupNode(string OriInfo, int NodeIndex)
        {
            //< node BACKGROUND_COLOR = "#D3D3D3" COLOR = "#000000" ID = "4" POSITION = "left" TEXT = "L2N1" HGAP = "2" VGAP = "2"  LINK="http://cn.bing.com/" />
            //<one:Page ID="{FD516CB5-2B12-0DBF-36F7-A94CC1F2CB61}{1}{E1954707177332228137621922741942907773224121}" name="Eng2" dateTime="2014-10-02T00:52:09.000Z" lastModifiedTime="2020-10-17T13:19:13.000Z" pageLevel="1" />
            //XDocument doc = XDocument.Parse(OriInfo);
            OriInfo = OriInfo.Replace("<one:", "<");
            string SecLastChar = OriInfo.Substring(OriInfo.Length - 2);
            bool ThisXmlLineClose = SecLastChar.Contains("/");
            if (!ThisXmlLineClose)
                OriInfo = OriInfo.Substring(0, OriInfo.Length - 1) + "/>";  //add "/" to fit the xml gramma  

            XElement root = XElement.Parse(OriInfo);
            string name = root.Attribute("name").Value;
            string SecID = root.Attribute("ID").Value;
            string NIndx = NodeIndex.ToString();
            string NodeContent = "";
            if (ThisXmlLineClose)
                NodeContent = "<node BACKGROUND_COLOR = \"#77BBF0\" COLOR = \"#000000\" ID = \"" + NIndx + "\" POSITION = \"left\" TEXT = \"" + name + "\" HGAP = \"2\" VGAP = \"2\" LINK=\"" + SecID + "\"/>";
            else
                NodeContent = "<node BACKGROUND_COLOR = \"#77BBF0\" COLOR = \"#000000\" ID = \"" + NIndx + "\" POSITION = \"left\" TEXT = \"" + name + "\" HGAP = \"2\" VGAP = \"2\" LINK=\"" + SecID + "\">";
            return NodeContent;
        }
        private string GenNoteBookNode(string OriInfo, int NodeIndex)
        {
            //< node BACKGROUND_COLOR = "#D3D3D3" COLOR = "#000000" ID = "4" POSITION = "left" TEXT = "L2N1" HGAP = "2" VGAP = "2"  LINK="http://cn.bing.com/" />
            //<one:Page ID="{FD516CB5-2B12-0DBF-36F7-A94CC1F2CB61}{1}{E1954707177332228137621922741942907773224121}" name="Eng2" dateTime="2014-10-02T00:52:09.000Z" lastModifiedTime="2020-10-17T13:19:13.000Z" pageLevel="1" />
            //XDocument doc = XDocument.Parse(OriInfo);
            OriInfo = OriInfo.Replace("<one:", "<");
            string SecLastChar = OriInfo.Substring(OriInfo.Length - 2);
            bool ThisXmlLineClose = SecLastChar.Contains("/");
            if (!ThisXmlLineClose)
                OriInfo = OriInfo.Substring(0, OriInfo.Length - 1) + "/>";  //add "/" to fit the xml gramma  
            XElement root = XElement.Parse(OriInfo);
            string name = root.Attribute("name").Value;
            string NoteBookID = root.Attribute("ID").Value;
            string NIndx = NodeIndex.ToString();
            string NodeContent = "";
            if (ThisXmlLineClose)
                NodeContent = "<node BACKGROUND_COLOR = \"#569CD6\" COLOR = \"#000000\" ID = \"" + NIndx + "\" POSITION = \"left\" TEXT = \"" + name + "\" HGAP = \"2\" VGAP = \"2\" LINK=\"" + NoteBookID + "\"/>";
            else
                NodeContent = "<node BACKGROUND_COLOR = \"#569CD6\" COLOR = \"#000000\" ID = \"" + NIndx + "\" POSITION = \"left\" TEXT = \"" + name + "\" HGAP = \"2\" VGAP = \"2\" LINK=\"" + NoteBookID + "\">";

            return NodeContent;
        }

        private string GenNodeCloseMark(string OriInfo)
        {
            string NodeContent = OriInfo.Replace(OriInfo, "</node>");
            return NodeContent;
        }

        private string ToHex(string input)
        {
            StringBuilder sb = new StringBuilder();
            foreach (char c in input)
                sb.AppendFormat("&#x{0:X2};", (int)c);
            return sb.ToString().Trim();
        }
    }
}
